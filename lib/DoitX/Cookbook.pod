=head1 NAME

DoitX::Cookbook - collection of recipes (for inclusion into a future official B<Doit::Cookbook>)

=head1 BOILERPLATE

The C<Doit> author is using the following boilerplate when writing
C<Doit> scripts:

    #!/usr/bin/env perl
    # -*- perl -*-
    
    use if !$ENV{DOIT_IN_REMOTE}, lib => "$ENV{HOME}/src/Doit/lib";
    use Doit; # install from CPAN or do "git clone https://github.com/eserte/doit.git ~/src/Doit"
    
    return 1 if caller;
    
    my $doit = Doit->init;
    
    __END__

Explanation:

=over

=item C<< #!/usr/bin/env perl >>

Use the first perl in C<PATH>. Use another shebang if C<Doit> is
installed in a different perl.

=item C<< # -*- perl -*- >>

The C<Doit> author is an emacs user. Omit this if you don't need this.

=item C<< use if !$ENV{DOIT_IN_REMOTE}, lib => "$ENV{HOME}/src/Doit/lib"; >>

C<Doit> does not have to be installed as a proper perl module. It's
also possible to just C<git clone> it and run from the uninstalled
source (see next step). The C<DOIT_IN_REMOTE> avoids adding the
library path in remote execution --- C<Doit> handles this itself. Omit
this line if always an installed C<Doit> should be used.

=item C<< use Doit; # install from CPAN or do "git clone https://github.com/eserte/doit.git ~/src/Doit" >>

Use the module, which also automatically includes the C<strict> and
C<warnings> pragmas, so you don't have to do it yourself. The comment
says that Doit may be installed as a proper perl module using C<CPAN>
or C<cpanm>, or just cloned to the proposed directory. This works
nicely with the C<use ... lib> line before.

=item C<< return 1 if caller; >>

The modulino "hack". Subroutines and variable definitions which should
be available in different context (remote execution with
C<do_ssh_connect> or in switched user context C<do_sudo>) need to go
above this line. The main C<Doit> script should go below this line.

=item C<< my $doit = Doit->init; >>

Create a C<Doit> runner. Use this for calling C<Doit> commands.

=back

=head1 SYSTEM WITH LOCAL ENV

Assume that one or more environment variables should be set just for
one C<system()> call. There are several possibilities:

=over

=item * Use C<env> (Unix/POSIX only)

    $doit->system(qw(env VAR=VALUE /path/to/command arg1 arg2 ...));

=item * Use localized C<%ENV>

    {
        local $ENV{VAR} = 'VALUE';
        $doit->system(qw(/path/to/command arg1 arg2 ...));
    }

=item * Use localized C<%ENV> together with C<setenv>

This is similar like the variant before, but logs the changed
environment variable.

    {
        local $ENV{VAR};
        $doit->setenv(VAR => 'VALUE');
        $doit->system(qw(/path/to/command arg1 arg2 ...));
    }

=back
